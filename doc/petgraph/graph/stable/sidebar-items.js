initSidebarItems({"struct":[["Neighbors","Iterator over the neighbors of a node.Iterator element type is `NodeIndex`."],["NodeIndices","Iterator over the node indices of a graph."],["StableGraph","`StableGraph<N, E, Ty, Ix>` is a graph datastructure using an adjacency list representation.***Unstable: API may change at any time.*** Depends on `feature = \"stable_graph\"`.The graph **does not invalidate** any unrelated node or edge indices when items are removed.`StableGraph` is parameterized over:Associated data `N` for nodes and `E` for edges, also called *weights*. The associated data can be of arbitrary type. Edge type `Ty` that determines whether the graph edges are directed or undirected. Index type `Ix`, which determines the maximum size of the graph. The graph uses **O(|V| + |E|)** space, and allows fast node and edge insert and efficient graph search.It implements **O(e')** edge lookup and edge and node removals, where **e'** is some local measure of edge count.Nodes and edges are each numbered in an interval from *0* to some number *m*, but *not all* indices in the range are valid, since gaps are formed by deletions.You can select graph index integer type after the size of the graph. A smaller size may have better performance.Using indices allows mutation while traversing the graph, see `Dfs`.The `StableGraph` is a regular rust collection and is `Send` and `Sync` (as long as associated data `N` and `E` are).Indices don't allow as much compile time checking as references."],["WalkNeighbors","A “walker” object that can be used to step through the edge list of a node.See *.detach()* for more information.The walker does not borrow from the graph, so it lets you step through neighbors or incident edges while also mutating graph weights, as in the following example:"]]});